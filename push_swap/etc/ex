

int	main(int argc, char *argv[])
{
	t_stack	a;
	t_stack	b;
	t_info	info;
	int		arr_size;
	int		*arr;

	if (argc < 2)
		print_error(-1);
	arr_size = 0;
	init_stack(&a);
	init_stack(&b);
	info.a = &a;
	info.b = &b;
	arr_size = get_input_size(argc, argv);
	arr = make_array(argc, argv, arr_size);
	info.array = arr;
	arr_to_stack(&info, arr, arr_size);
	check_dup(&info, arr_size);
	check_sort(arr, arr_size, 0);
	sort_elem(&info);
	free(info.array);
	free_stack(info.a);
	free_stack(info.b);
}


void	set_pivot_divide(t_info *info)
{
	int	idx;
	int	piv1;
	int	piv2;


	piv1 = get_pivot(info, info->a->size / 3);
	piv2 = get_pivot(info, info->a->size * 2 / 3);
	idx1 = info->a->size;
	while (idx1)
	{
		divide_triple(info, piv1, piv2);
		idx1--;
	}
}


int	get_min(t_stack *stack, int size)
{
	int	i;
	int	min;

	i = 0;
	min = 2147483647;
	while (i < size)
	{
		if (min > arr[i])
			min = arr[i];
		i++;
	}
	return (min);
}
